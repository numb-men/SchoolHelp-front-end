<template>
	<div>
		<uni-tabs @change="changeTab" :index="tabIndex">
			<uni-tab-bar>
				<div class="tab-bar-item" v-for="(tabBar, index) in tabBars" :key="index" :ref="tabBar.id + index">
					<text class="tab-bar-title" :class="[tabIndex === index ? 'active' : '']">{{tabBar.name}}</text>
				</div>
			</uni-tab-bar>
			<uni-tab-content>
				<list class="list" v-for="(tabItem, tabIndex) in newsList" :key="tabIndex" @loadmore="loadMore(tabIndex)"
				 loadmoreoffset="10">
					<refresh class="refresh" @refresh="onRefresh" @pullingdown="onPullingDown" :display="refreshing ? 'show' : 'hide'">
						<text class="refresh-text">{{refreshText}}</text>
					</refresh>
					<cell>
						<div class="search" @click="goSearch">
							<image class="search-mirror" src="../../static/icons/searchMirror.png"></image>
							<text class="search-text">点击跳转搜索</text>
						</div>
					</cell>
					<cell v-if="tabIndex===0">
						<slider class="slider" interval="3000" auto-play="true">
							<div class="frame" v-for="(img,index) in imageList" :key="index">
								<image class="image" resize="cover" :src="img.src" @click="goDetail(newsItem)"></image>
							</div>
							<indicator class="indicator"></indicator>
						</slider>
					</cell>
					<cell v-for="(newsItem, newsIndex) in tabItem.data" :key="newsIndex">
						<uni-media-list :data="newsItem" @click="goDetail(newsItem)"></uni-media-list>
					</cell>
					<cell class="loadmore">
						<text class="loadmore-text">{{tabItem.loadingText}}</text>
					</cell>
				</list>
			</uni-tab-content>
		</uni-tabs>
		
		<image src="../../static/icons/add.png" mode="" class="add-post" @click="goAddPost"></image>
	</div>
</template>

<script>
	import uniTabContent from '@/components/uni-tab-content/uni-tab-content.nvue';
	import uniTabBar from '@/components/uni-tab-bar/uni-tab-bar.nvue';
	import uniTabs from '@/components/uni-tabs/uni-tabs.nvue';
	import uniMediaList from '@/components/uni-media-list/uni-media-list.nvue';
	import {
		friendlyDate
	} from '@/common/util.js';

	const dom = weex.requireModule('dom');

	export default {
		data() {
			return {
				imageList: [{
						src: '../../static/images/add1.png'
					},
					{
						src: '../../static/images/add2.png'
					},
					{
						src: '../../static/images/add3.png'
					}
				],
				refreshing: false,
				refreshText: '下拉刷新',
				newsList: [],
				tabIndex: 0,
				tabBars: [{
					name: '学术论坛',
					id: 1 //填写对应存储的帖子typeId
				}, {
					name: '校园动态',
					id: 2 //填写对应存储的帖子typeId
				}, {
					name: '二手交易',
					id: 1 //填写对应存储的帖子typeId
				}, {
					name: '缺个伴吗',
					id: 1 //填写对应存储的帖子typeId
				}, {
					name: '帮你干活',
					id: 1 //填写对应存储的帖子typeId
				}, {
					name: '经验交流',
					id: 1 //填写对应存储的帖子typeId
				}, ]
			}
		},
		components: {
			uniTabContent,
			uniTabBar,
			uniTabs,
			uniMediaList
		},
		created() {
			// 初始化列表信息
			this.tabBars.forEach((tabBar) => {
				this.newsList.push({
					data: [],
					requestParams: {
						typeId: tabBar.id
					},
					loadingText: '加载中...'
				});
			});
			this.getList();
		},
		methods: {
			getList(action = 1) {
				let activeTab = this.newsList[this.tabIndex];
				activeTab.requestParams.time = new Date().getTime() + '';
				if (action === 1) {
					activeTab.requestParams.minId = 0;
				}
				uni.request({
					url: 'http://134.175.16.143:8080/schoolhelp-1.0.3/post/type/' + activeTab.requestParams.typeId,
					method: 'GET',
					success: (result) => {
						const data = result.data.data.map((news) => {
							return {
								postId: news.postId,
								userId: news.userId,
								datetime: friendlyDate(new Date(news.issueTime.replace(/\-/g, '/').replace(/\T/g, ' ').substring(0, 19)).getTime()),
								title: news.title,
								image_url: news.cover,
								content: news.content,
								points: news.points,
								viewNum: news.viewNum,
								approvalNum: news.approvalNum,
								commentNum: news.commentNum,
								reportNum: news.reportNum,
								postType: news.postType,
								userName: news.userName
							};
						});
						// console.log(data[0].userName);
						if (action === 1) {
							activeTab.data = data;
							this.refreshing = false;
						} else {
							data.forEach((news) => {
								activeTab.data.push(news);
							});
						}
					}
				});
			},
			goDetail(detail) {
				uni.navigateTo({
					url: 'post-detail/post-detail?query=' + encodeURIComponent(JSON.stringify(detail))
				});
			},
			goSearch() {
				uni.navigateTo({
					url: 'search-post/search-post'
				});
			},
			goAddPost() {
				uni.navigateTo({
					url: 'add-post/add-post'
				});
			},
			loadMore() {
				this.getList(2);
			},
			async changeTab(event) {
				this.tabIndex = event.index;
				const activeNode = this.$refs[this.tabBars[event.index].id + event.index][0];
				let nodeSize = await this.getNodeSize(activeNode);
				if (nodeSize.left + nodeSize.width > 750) {
					let index = event.index - 4;
					let targetNode = this.$refs[this.tabBars[index].id + index][0];
					dom.scrollToElement(targetNode, {});
				} else if (nodeSize.left < 0) {
					dom.scrollToElement(activeNode, {});
				}
				// 首次切换后加载数据
				const activeTab = this.newsList[this.tabIndex];
				if (activeTab.data.length === 0) {
					this.getList();
				}
			},
			getNodeSize(node) {
				return new Promise((resolve, reject) => {
					dom.getComponentRect(node, (result) => {
						resolve(result.size);
					});
				});
			},
			onRefresh(event) {
				this.refreshText = '正在刷新...';
				this.refreshing = true;
				this.getList();
			},
			onPullingDown(event) {
				if (this.refreshing) {
					return;
				}
				if (Math.abs(event.pullingDistance) > Math.abs(event.viewHeight)) {
					this.refreshText = "释放立即刷新";
				} else {
					this.refreshText = "下拉可以刷新";
				}
			}
		}
	}
</script>

<style>
	.image {
		height: 300upx;
	}

	.search {
		display: flex;
		flex-direction: row;
		font-size: 40upx;
		border: 5px solid #007AFF;
		/* border-radius: 30%; */
		height: 80upx;
		background-color: #F0F0F0;
		text-align: center;
		justify-content: center;
	}

	.search-text {
		color: #707070;
		border: 5px solid #007AFF;
		margin-top: 20upx;
	}

	.search-mirror {
		width: 40upx;
		height: 40upx;
		margin-top: 20upx;
	}

	.slider {
		position: relative;
		height: 300upx;
	}

	.frame {
		height: 300upx;
	}

	.indicator {
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
		height: 60px;
		background-color: rgba(0, 0, 0, 0);
		item-color: #ddd;
		item-selected-color: rgb(0, 180, 255);
	}


	.swiper {
		height: 300upx;
	}

	.adds {
		width: 100%;
		height: 100%;
	}

	.tab-bar-item {
		width: 150px;
		height: 100px;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.tab-bar-title {
		height: 100px;
		line-height: 100px;
		font-size: 30px;
		color: #555;
	}

	.active {
		color: #007AFF;
	}

	.loadmore {
		height: 70px;
		width: 750px;
		flex-direction: column;
		justify-content: center;
	}

	.loadmore-text {
		font-size: 30px;
		text-align: center;
		color: #999999;
	}

	.refresh {
		width: 750px;
		height: 70px;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}

	.refresh-text {
		text-align: center;
		font-size: 28px;
		color: #999999;
	}

	.btn-plusempty {
		z-index: 999;
		width: 110upx;
		height: 110upx;
		background: #007bfa;
		position: fixed;
		bottom: 50upx;
		right: 20upx;
		border-radius: 100%;
		overflow: hidden;
		text-align: center;
		line-height: 110upx;
	}

	.bottom-btn-hover {
		background: #0564c7 !important;
		;
	}

	.plusempty-img {
		width: 50upx;
		height: 50upx;
		margin-top: 30upx;
	}
	
	.add-post {
		width: 90upx;
		height: 90upx;
		border-radius: 50%;
		position: fixed;
		bottom: 80upx;
		right: 30upx;
	}
</style>
